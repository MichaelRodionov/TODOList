name: todo_list workflows
on: [push]
jobs:
  linter_check:
    runs-on: ubuntu-latest
    steps:
      - name: Check out source repository
        uses: actions/checkout@v3

      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: flake8 Lint
        uses: py-actions/flake8@v2
        with:
          exclude: |
            "./core/migrations/"
            "./goals/migrations/"
            "./bot/migrations/"
            "./tests/conftest.py/"
          max-line-length: "120"
          ignore: F401

  mypy_check:
    runs-on: ubuntu-latest
    needs: linter_check
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Poetry and dependencies
        run: |
          python3 -m pip install poetry
          poetry config virtualenvs.create false
          poetry install
      - name: Run Mypy
        run: poetry run mypy .
        with:
          python-version: "3.11"

  build_and_push_image:
    env:
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
    runs-on: ubuntu-latest
    needs: mypy_check
    steps:
      - name: clone code
        uses: actions/checkout@v2

      - name: docker build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/todolist_docker:$GITHUB_REF_NAME-$GITHUB_RUN_ID .

      - name: docker login
        run: echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: docker push
        run: docker push michaelrodionov/todolist_docker:$GITHUB_REF_NAME-$GITHUB_RUN_ID

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_image
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      VK_ID: ${{ secrets.VK_ID }}
      VK_KEY: ${{ secrets.VK_KEY }}
      BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
    steps:
      - name: clone code
        uses: actions/checkout@v2
      - name: render configuration files
        run: |
          mkdir todo_list_app
          cat docker-compose-ci.yaml | envsubst > todo_list_app/docker-compose.yaml
          cat .env.todolist | envsubst > todo_list_app/.env
          cat nginx.conf > todo_list_app/nginx.conf

      - name: copy files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          source: "todo_list_app/docker-compose.yaml"
          target: "todo_list_server"
          strip_components: 1

      - name: copy env
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          source: "todo_list_app/.env"
          target: "todo_list_server"
          strip_components: 1

      - name: copy nginx config
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          source: "todo_list_app/nginx.conf"
          target: "todo_list_server"
          strip_components: 1

  run:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: run application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          script: |
            cd todo_list_server
            echo ${{ secrets.PASSWORD }} | sudo -S docker-compose up -d
